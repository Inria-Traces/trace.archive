#+STARTUP: overview inlineimages

* General information
** Output file
See [[file:info.org][info.org]] for details.
** Authors
- Luka Stanisic <luka.stanisic@imag.fr>, MESCAL/Grenoble
- Arnaud Legrand <arnaud.legrand@imag.fr>, MESCAL/Grenoble
** Application
This a trace from =qrm_starpu=, a specific implementation of [[http://buttari.perso.enseeiht.fr/qr_mumps/][the QR
MUMPS approach]] using [[http://starpu.gforge.inria.fr/][StarPU]]. In this particular example, we ran
=qrm_starpu= on the [[http://www.cise.ufl.edu/research/sparse/matrices/Meszaros/e18.html][e18 matrix]]. StarPU was configured to use the default
[[http://starpu.gforge.inria.fr/doc/html/HowToOptimizePerformanceWithStarPU.html][dmda]] scheduler.
** Machine description 
The experiment was conducted on the [[https://plafrim.bordeaux.inria.fr/doku.php?id%3Dplateforme:configurations:fourmi][fourmi]] cluster from
[[https://plafrim.bordeaux.inria.fr][PLAFRIM/Bordeaux]]. We used a whole node, i.e., 2 Quad-core Nehalem
Intel® Xeon® X5550 @ 2,66 GHz.
** Purpose of the experiment
There is no particular purpose here, except to show how to to report
experimental data on this trace archive.
* ZENODO content (written automatically)
https://zenodo.org/record/16160/files/qrm_starpu-e18.tar.gz
* Discussions
** Analysis by Luka Stanisic <luka.stanisic@imag.fr>
#+begin_src sh :results output :exports both
LANG=C ; date
#+end_src

#+RESULTS:
: Tue Mar 31 14:44:26 CEST 2015

I have loaded the trace into FrameSoc using the following command to first convert it to pjdump format:
#+begin_src sh :results output :exports both
../../../src/starpu/pjdump_starpu_trace.sh -a -s paje.trace pjdump
#+end_src

Pjdump that I have on my machine is the following:
#+begin_src sh :results output :exports both
cd ~/Repository/pajeng
git log -1
#+end_src

#+RESULTS:
: commit de07af3b58a6400f29345922bfdd9006db61ac95
: Author: Lucas Schnorr <schnorr@inf.ufrgs.br>
: Date:   Thu Feb 26 14:14:19 2015 -0300
: 
:     probabilistic simulator report (use -p filter in pj_dump to use it)

Once the trace have been loaded in FrameSoc I tried to find something interesting with Gantt chart or Ocelotl. However, this execution with qrm_starpu was very stable so these views didn't help. What I discovered using Pie chart is that the GEMQRT kernel takes almost 94% of the total time spent executing (when all idle time and overheads are ignored). Is this surprising? 
 
Here is the corresponding analysis:

[[file:Screenshot_e18.png]]

*** Reply by Arnaud Legrand <arnaud.legrand@imag.fr>
    Actually this is not surprising at all since indeed qrm_starpu spends most of its time running GEMQRT. 

    However, what could be interesting to see is the total time spent idle or doing scheduling, in order to evaluate the efficiency of the StarPU.
*** Reply by Luka
    Well scheduler seems to be quite good, just check the [[file:Screenshot_e18_2.png][screenshot]]. The application spends 95% of the time running different kernels, which means that overhead of the runtime is minimal and that the scheduling was done very efficiently. I wonder how this would scale on larger NUMA machines, like [[https://plafrim.bordeaux.inria.fr/doku.php?id=plateforme:configurations:machine_sgi][manumanu]]?
** Analysis by Arnaud Legrand <arnaud.legrand@imag.fr>
Discussions with Lucas Schnorr, Vincent Danjean and Vinicius Garcia
Pinto

After I downloaded and unpacked the trace from zenodo, I wanted to
show the others there was actually a lot of information in these
traces:

#+begin_src sh :results output raw :exports both
  cd /tmp/
  mkdir qrm_e18;
  cd qrm_e18
  tar zxf ../qrm_starpu-e18.tar.gz
  dot -Tpdf atree.dot > atree.pdf
  echo file://`pwd`/atree.pdf
#+end_src

#+RESULTS:
file:///tmp/qrm_e18/atree.pdf

